use core::sha256::{compute_sha256_u32_array};

//Hashes left and right leaf of the merkle tree
fn hash(left: [u32; 8], right: [u32; 8]) -> [u32; 8] {
    let left_span = left.span();
    let right_span = right.span();
    let result = compute_sha256_u32_array(array![
        *left_span[0], *left_span[1], *left_span[2], *left_span[3], *left_span[4], *left_span[5], *left_span[6], *left_span[7],
        *right_span[0], *right_span[1], *right_span[2], *right_span[3], *right_span[4], *right_span[5], *right_span[6], *right_span[7],
    ], 0, 0).span();
    compute_sha256_u32_array(array![
        *result[0], *result[1], *result[2], *result[3], *result[4], *result[5], *result[6], *result[7]
    ], 0, 0)
}

//Computes the merkle root from the provided leaf, with the proof and _index (position of the leaf in the bottom layer of the tree)
fn get_merkle_root(leaf: [u32; 8], proof: Span<[u32; 8]>, _index: u32) -> [u32; 8] {
    let mut index = _index;
    let mut root_hash = leaf;
    for proof_leaf in proof {
        root_hash = if index & 0x01 == 0x00 {
            hash(root_hash, *proof_leaf)
        } else {
            hash(*proof_leaf, root_hash)
        };
        index /= 2;
    };
    root_hash
}

//Verifies the merkle root inclusion proof
pub fn verify(root: [u32; 8], leaf: [u32; 8], proof: Span<[u32; 8]>, index: u32) {
    assert(root==get_merkle_root(leaf, proof, index), 'merkle_tree: verify failed');
}

//Test cases generated by: scripts/tests_unit/bitcoin_merkle_tree.js
#[cfg(test)]
mod tests {
    use super::*;

    //Test on real bitcoin transactions and their merkle proofs
    #[test]
    fn test_valid_real() {
        // Block height: 802232 Position: 1153 txId: 1152fa89aae840f66450ff8ecad3d06ffee5650bf1f99dfa48fdf81d637f50db
        let (root, txId, proof, position) = (
            [0x64fdf12d, 0x901680a9, 0xb765c372, 0xc54380a7, 0x0faf45ab, 0xa5e0a36c, 0xd8aab486, 0xff907fb4],
            [0xdb507f63, 0x1df8fd48, 0xfa9df9f1, 0x0b65e5fe, 0x6fd0d3ca, 0x8eff5064, 0xf640e8aa, 0x89fa5211],
            array![
                [0xb2e11386, 0x49f7a039, 0xaa661866, 0x089d4222, 0x1402c5cf, 0xfbeeac5b, 0xbd1e9ec9, 0xb1cc1d90],
                [0x487573d7, 0x55d82cc0, 0x9d3f1b3c, 0x73ab060b, 0x194e736c, 0x56e88b17, 0x83aeb671, 0x7ccae617],
                [0xbae63670, 0xf4b69a7e, 0x0e5f2807, 0x02dbe3ce, 0x680265bf, 0x6d40d2df, 0x9d00eb4d, 0xd56b0c26],
                [0xe43e794f, 0x687cb27c, 0xf8e5fbf2, 0x4bc89bcc, 0x31864d1d, 0x707cb84a, 0xfe60e6fe, 0x9476026b],
                [0x7d9e2061, 0x5f99a255, 0x5ea798ab, 0x8b176eb4, 0xb38e3ad8, 0xed641048, 0x72e754ad, 0x239f9015],
                [0x534e43d7, 0xd74521ee, 0x05312e81, 0xcaf95998, 0xe3d8ac00, 0x70d9f5c9, 0xf1fa9415, 0xf2a85f9e],
                [0x1204d67d, 0xd9156946, 0x0aa39d3c, 0xf522fe6c, 0xdfd9c6b6, 0x89edbcb3, 0x9eb62fe8, 0xce6ea74f],
                [0x5f14495d, 0x9b4f5db2, 0xc7760b75, 0x40b64db3, 0x96d707f5, 0xd2352cf4, 0x1d7c9813, 0x9ad3f78b],
                [0xe557add9, 0xd991bc59, 0x783ce943, 0xc03034ef, 0x7206ab88, 0xbd00c258, 0xb5ad0947, 0x9874dcfe],
                [0x35a1e9fd, 0x5939c1ea, 0x28f2d758, 0x7d9367da, 0x39f7c82a, 0x8c02c423, 0xd2bfba57, 0x496d2fd5],
                [0x6835cd46, 0xefa6ecb6, 0x6b83f3a6, 0xdebc418e, 0xbb5bcfa2, 0x9dcd7897, 0x389263d7, 0xce66f12a],
                [0xe84ee8eb, 0xc441420a, 0x2f481766, 0x406c8a35, 0xb21bc3ca, 0x5fa571c2, 0x0fb673cc, 0x4bbe1a71]
            ].span(),
            0x481
        );
        verify(root, txId, proof, position);

        // Block height: 630671 Position: 13 txId: d7a3436dc33277d79b0c05c22427e036d4188808ddb127ca576a8b30cea523e6
        let (root, txId, proof, position) = (
            [0x7189c7e3, 0xb7fee20a, 0x1dbc5b32, 0xfad4f7e2, 0xf944b973, 0x3b7316a4, 0x439e2452, 0xcf2d641b],
            [0xe623a5ce, 0x308b6a57, 0xca27b1dd, 0x088818d4, 0x36e02724, 0xc2050c9b, 0xd77732c3, 0x6d43a3d7],
            array![
                [0xb366ec29, 0xfc267c74, 0xa344e262, 0x4dcbcce6, 0xae6cd522, 0xf24072be, 0x1dec6508, 0x5cadb682],
                [0xeff04bbb, 0x70f9265a, 0x7d59f9ed, 0x9612941e, 0x65cd2012, 0xe0787f5b, 0x2c2f23a8, 0xf799f0f3],
                [0xe86a0607, 0x4ae994dd, 0x485bce6c, 0x9d0c79fb, 0x3c4434e4, 0xfa763fe9, 0x9e36ee8a, 0xe5ed3ebc],
                [0xd300cf13, 0x7ea6d074, 0xb657dd83, 0xbff5a0ed, 0x4fbdc1e8, 0xbbfcca9b, 0x363348f2, 0x86d00914],
                [0x8f9648c8, 0x20506ffd, 0xe68237ce, 0xef368cd3, 0xd03d65f6, 0x94e6efef, 0x68b3e1ab, 0xeacbb6aa],
                [0x403425a7, 0x211d8491, 0xcf62f649, 0xf957ac10, 0xf60150f2, 0x23ae6d93, 0x8e46a6e7, 0x02227efe],
                [0x6fcf0715, 0xda67c02c, 0xfc701e7c, 0x44391027, 0x66db7ec7, 0x9d96ae6a, 0xa36bc84a, 0x01289fb4],
                [0x183aba23, 0xdc3fe2cf, 0x21a4337d, 0x2c9d536c, 0xd63184bc, 0x505e31e0, 0xe90307ab, 0xbc4e1d30],
                [0x5916075a, 0x033736b7, 0x60b1bd8a, 0x4a80e91d, 0x8d6d8044, 0xbfaf0736, 0x7e3b09be, 0x89d15d5f],
                [0xa09aee45, 0xfc6175dc, 0x8626c3fc, 0x814f56ff, 0x6d5c44be, 0xa1098fb6, 0x9c3ffe29, 0x1a3c12b0],
                [0xb9de9516, 0x777f9f09, 0xff476377, 0x34ca4be0, 0x365c4f23, 0x77b1bf23, 0xa8385837, 0xc352f49a],
                [0xf44a2f35, 0xcbd96f54, 0x58a97b15, 0x1afa82e3, 0xf2549a83, 0xa3f1dec4, 0xe5feb24d, 0x25ef06b1]
            ].span(),
            0xd
        );
        verify(root, txId, proof, position);

        // Block height: 386780 Position: 597 txId: f23bae9794b4269b70ae4e2ec26b929ce4463a7fd77bca2d9f0481a21a7a48d8
        let (root, txId, proof, position) = (
            [0xa8a179e5, 0x7e6867a3, 0x689c4015, 0x3a331183, 0x48a19c85, 0xafaccbcb, 0x70964b5c, 0x7b0246c3],
            [0xd8487a1a, 0xa281049f, 0x2dca7bd7, 0x7f3a46e4, 0x9c926bc2, 0x2e4eae70, 0x9b26b494, 0x97ae3bf2],
            array![
                [0xc9af777f, 0x71d116c8, 0x1cffea90, 0x6e99ef8b, 0x4557d569, 0x22600117, 0xec57961d, 0x421f2e6e],
                [0x6cb7bfc7, 0x7aeab8ec, 0xc52a622f, 0xfaf96c3b, 0x048c9d5e, 0x5ec6b687, 0x169c3028, 0x03c026ec],
                [0xfa65cbc8, 0xd2d6424d, 0x78403d76, 0x9896e3f1, 0xde918fea, 0x1f681123, 0x3d6f6b3f, 0x1ca17366],
                [0xfcead00a, 0x4ca89925, 0x622654cb, 0x01d41196, 0x4edd113c, 0xb0da8ef0, 0xd5968c9c, 0xeb8d71ea],
                [0x2ce8e2e9, 0x642df2e2, 0xd3451be2, 0x68ab1a66, 0x2a0fe6af, 0xb6a2173e, 0xef712774, 0x50332c7a],
                [0x7ca77b68, 0x48f5d4e0, 0xfd3ff59e, 0xcf83f68c, 0xa8caba9e, 0x841cc567, 0x3dceed67, 0x18a7c70c],
                [0x931e1f98, 0xb09a75d9, 0xed6488b0, 0xc7d2a9bb, 0x046c5da7, 0x7cf47301, 0x1766d4f5, 0x5b9cfba7],
                [0xce1db0e9, 0x4208da17, 0xbc3a7bd3, 0x36e47e17, 0xb2458693, 0x1e776087, 0xa21d977a, 0x91d771d6],
                [0xd9e591bc, 0x351a15b5, 0xb1c140cc, 0x18675006, 0xc9c1541c, 0x682132a7, 0x465bc914, 0x63343128],
                [0x059882db, 0x34b52671, 0x6c871069, 0xbd9255bd, 0xbcafaa2d, 0xc987890b, 0xfbefce47, 0x1ac9e6bd],
                [0x538780ee, 0xa1829f26, 0x1b3e1b92, 0xb1dd9563, 0x55840f91, 0x13052b64, 0x8f8eabf1, 0xbda04891],
                [0xbb1c95f1, 0x66de9614, 0x6d21176e, 0xfee60b25, 0x9ef6bb8b, 0xba141139, 0xa0f448ac, 0x8f244648]
            ].span(),
            0x255
        );
        verify(root, txId, proof, position);

        // Block height: 435892 Position: 108 txId: b74100d73a758a473c96e4419069f5a43589f16000e615d24197f8ce7df6abef
        let (root, txId, proof, position) = (
            [0xceb433b9, 0x1d337d7b, 0x309bc297, 0x9348ae5c, 0xfd515c57, 0x458bdbe6, 0x4e604849, 0x15c7b560],
            [0xefabf67d, 0xcef89741, 0xd215e600, 0x60f18935, 0xa4f56990, 0x41e4963c, 0x478a753a, 0xd70041b7],
            array![
                [0xed3442aa, 0x8feee2b4, 0x3f580d1d, 0xaf04fffd, 0xfcde6932, 0x8ee14b3b, 0x00e1e866, 0x40f66c6f],
                [0x4e1390ad, 0x5b5d94b6, 0x636ca814, 0x38ce533a, 0x06528ff9, 0x9e4520d6, 0x2659f097, 0x844574d8],
                [0x05112151, 0xb75e1992, 0x13dac66b, 0xb7b1867b, 0x36c0aa1f, 0x943c3e2e, 0x0022e4d6, 0x66334372],
                [0x69949640, 0xf8f0c7f3, 0xcad7b1f8, 0xed04c5e8, 0x6d4b4307, 0xde5501f2, 0xfb997546, 0x66c01af7],
                [0xb7297802, 0x3263caf2, 0xa48f01ae, 0xd7230224, 0x57a41b66, 0x3bdbe7e5, 0xee8daa84, 0x052e620a],
                [0x57f4ebb0, 0x11b5fa9b, 0xb1c73af9, 0x3b1b9038, 0x72915c4e, 0x78f28667, 0x947e6fe3, 0xeb504e31],
                [0xda24cea2, 0x63f4e0f3, 0xb01c8674, 0x5abbd636, 0x1e644256, 0xe9f97d71, 0xe260b166, 0x07deb456],
                [0x8ab9726a, 0x90c193b1, 0xc034f523, 0xedd3091b, 0x537ffe8c, 0x4bfef557, 0x96dd614c, 0x8962e4b6],
                [0xe38fe88b, 0xa4d97b75, 0x03464b5b, 0xc4c83850, 0x0108e00b, 0x759ad1ba, 0x1f687fde, 0x9a28361c],
                [0x188ea4cf, 0x77b772b4, 0x5252fb3d, 0x8cb4589f, 0x71ae3dc6, 0xa4d65457, 0x7c025fff, 0x74fc1b84]
            ].span(),
            0x6c
        );
        verify(root, txId, proof, position);

        // Block height: 44587 Position: 0 txId: 9d9912eba44e0aa20b0a977718dd149d91186c191e41546e655c3c25baf4e973
        let (root, txId, proof, position) = (
            [0x73e9f4ba, 0x253c5c65, 0x6e54411e, 0x196c1891, 0x9d14dd18, 0x77970a0b, 0xa20a4ea4, 0xeb12999d],
            [0x73e9f4ba, 0x253c5c65, 0x6e54411e, 0x196c1891, 0x9d14dd18, 0x77970a0b, 0xa20a4ea4, 0xeb12999d],
            array![

            ].span(),
            0x0
        );
        verify(root, txId, proof, position);

        // Block height: 684719 Position: 570 txId: 40a180f49895cde91e45e500069d09e6a7758376803f694e2b8b02edcb9a0941
        let (root, txId, proof, position) = (
            [0x46e285dc, 0x3ba2ac25, 0x11c78a7c, 0xd4570045, 0xd6530eb2, 0x9bba1130, 0x17ea3c4c, 0x83f22bec],
            [0x41099acb, 0xed028b2b, 0x4e693f80, 0x768375a7, 0xe6099d06, 0x00e5451e, 0xe9cd9598, 0xf480a140],
            array![
                [0xa03f8b78, 0xdc5f163a, 0x3a25e81a, 0x384ba731, 0x80d2d750, 0x07b8b444, 0xa3d9d65e, 0xcbda84b9],
                [0xcb80685c, 0x67b00834, 0x374d4ede, 0x30f02100, 0xd3e5d289, 0x2cd9ed96, 0x8fbafbdd, 0x084e87d7],
                [0x6328a27b, 0x5dd65cf1, 0x0ac5972d, 0x713e91a3, 0x703a3fb9, 0x4e9ed565, 0x53b95c23, 0xc9a84849],
                [0x560ceab7, 0xcaf83385, 0x8c4408ff, 0x6bb7352b, 0x6bd47e10, 0x0b78c8c4, 0xec25012f, 0xbfc4d2e3],
                [0x7858360b, 0xd0257309, 0x5295e112, 0x18644ba3, 0xcab8a8af, 0xfbbd3199, 0x71e1658d, 0x6c3d78f5],
                [0xb25ae184, 0xefde5a82, 0xf1725a03, 0x4169c2c9, 0x463171f5, 0xc70db845, 0x0049759b, 0x869ae550],
                [0x807bfb4e, 0x72fb013d, 0xed6a124d, 0x00fadaeb, 0xb272a179, 0x2f70e0c3, 0x4727806e, 0x8737c5cc],
                [0x5d68b0cc, 0x3f71891d, 0xfa17c33d, 0x087d1502, 0xb2655ade, 0xed0d4c4e, 0x2c14c928, 0xed764f4d],
                [0x03322a62, 0x438de26d, 0x42ebd4db, 0xfa482d83, 0xee3e9741, 0x22ee34f9, 0xcab89141, 0x132c88f3],
                [0x1f7dd5a1, 0xa1764ca1, 0x76aa4e4f, 0x7609381c, 0x46808b3a, 0x9dfd2997, 0x5e46417f, 0xba10c82b],
                [0x854838ac, 0xf72d9cc0, 0x48d61ea2, 0x1abc6932, 0x7647eae2, 0xe5350b11, 0x4998cb7d, 0xd35ea0a6],
                [0x21a43780, 0x1f29e687, 0x1007c8c5, 0x6cc652f6, 0x79e9ab03, 0x948bb16b, 0x289ba53e, 0xee374c1a]
            ].span(),
            0x23a
        );
        verify(root, txId, proof, position);

        // Block height: 580496 Position: 816 txId: a7960f809a5e475ea2a8c3a38e84bdcf42b82889191b269bb17a1a847845a6aa
        let (root, txId, proof, position) = (
            [0x0ac3f609, 0x882bf464, 0xd8725aff, 0x33cbf265, 0xe9575170, 0x2c9de3ca, 0xe8348bac, 0x4ca4c0ad],
            [0xaaa64578, 0x841a7ab1, 0x9b261b19, 0x8928b842, 0xcfbd848e, 0xa3c3a8a2, 0x5e475e9a, 0x800f96a7],
            array![
                [0xe14f387f, 0x971f3651, 0xaaa72b2e, 0x5352e742, 0x9ab9b3e0, 0x3c4506c7, 0xb305655c, 0x509eb51f],
                [0x0a8385a7, 0xdd175ca3, 0xb71212a8, 0x7e7ec852, 0xe4c6c3cf, 0x1872c685, 0x2b810604, 0x4c637fee],
                [0xd658471f, 0x0e4d6e86, 0xdbf7ff1b, 0x8fe22d99, 0x10ef205d, 0xdfb26666, 0x9b5f94a8, 0xe87764f6],
                [0xa347955e, 0xbb86641d, 0xec087b3e, 0x511bb974, 0x1ebc7b71, 0x0bc5871f, 0xcbbaa1c4, 0xb5a43e49],
                [0xe17a733f, 0xc9a7ea07, 0x8b5f0f36, 0xb12e0f04, 0x994dbddf, 0x9755497a, 0x32f82b30, 0x3b743841],
                [0x7d209fd2, 0x71376519, 0x67dee500, 0x8fa4aad0, 0x636c7717, 0x3cf7c756, 0xab4371a6, 0xe69bd607],
                [0xc767741c, 0xaaf00c12, 0x61e5363a, 0x236ed998, 0xa2f9724b, 0xe5a48b28, 0x0fe8b987, 0x3db94126],
                [0x48bf01f6, 0xed46c0dc, 0x2cdb57b8, 0xebde8d8a, 0x9a5d4122, 0x2c9768b5, 0x44884175, 0x4ae880be],
                [0xa5684d25, 0x8b574e98, 0xd45d5278, 0x34c6c3f0, 0xdacdbad2, 0xbd7ed147, 0xb6948b52, 0x70308a3a],
                [0xf2159424, 0x7109f217, 0xc1e13026, 0x07e37362, 0x6b5da91d, 0xc2577b2d, 0xb53a96e3, 0x1aae831f],
                [0xd5ab56a9, 0xcc9a9814, 0xaa36a948, 0xac99a49e, 0x706aef4f, 0x8992c07b, 0xb047dc37, 0x805bddb3],
                [0xfa5460c7, 0xdb86654f, 0x74b1c313, 0xa9715a78, 0x59a8939c, 0x5a1336f1, 0xa11fbc0c, 0x263e446d]
            ].span(),
            0x330
        );
        verify(root, txId, proof, position);

        // Block height: 239541 Position: 36 txId: 611f7d92818459b888ed489f7c51149e60838945781409f5d00c7e58c55c06dc
        let (root, txId, proof, position) = (
            [0x120533d1, 0x63b7f760, 0x1e82d251, 0x4aa46fb3, 0xcee68c20, 0x9d69f4fa, 0x16e3d876, 0xbdc29dd6],
            [0xdc065cc5, 0x587e0cd0, 0xf5091478, 0x45898360, 0x9e14517c, 0x9f48ed88, 0xb8598481, 0x927d1f61],
            array![
                [0xa7fa6189, 0xe4a6960c, 0x66661d2a, 0xc17c4c12, 0x8ff2346f, 0xbe6062eb, 0xd822265d, 0x8f6b55d1],
                [0x148e6528, 0x537be892, 0x96281574, 0x430adfb8, 0x9cc55ef8, 0xcffc3afa, 0x3e5c96e5, 0xf24b0711],
                [0x799398e1, 0x9acb366b, 0xe1023004, 0xbe7f779a, 0xc86383ae, 0x23a71f3b, 0x54d010f2, 0x60737cc0],
                [0x6700b601, 0x87b14490, 0xc09fd844, 0xb51d3cd5, 0x42901ab6, 0x51fce10a, 0x6c93061d, 0xcb84eaa3],
                [0x586c511f, 0xd51651be, 0xb60ca7ad, 0x4b742a86, 0x1e45e5a0, 0xd224bd78, 0xba3d700f, 0x63291d73],
                [0x88538f96, 0x51fa1c66, 0xcfc75b4e, 0x15fc3b7c, 0xe72167b1, 0xe92866b4, 0xabcb0015, 0x0c7abfba],
                [0xf532e566, 0x4834bf4f, 0x124b68f6, 0x36f0e57d, 0x5f1b3395, 0x63d62d26, 0xc2d30147, 0x49fa2f6c]
            ].span(),
            0x24
        );
        verify(root, txId, proof, position);

        // Block height: 618950 Position: 1823 txId: d6d21137ee17938319bb94da6fb8211e7934a1366895fac761d79a25e1db2bd7
        let (root, txId, proof, position) = (
            [0x772b8dd9, 0x06bb856d, 0xd3095e65, 0x50d1b081, 0xf8bde548, 0x9e3adb6f, 0x4097c7d3, 0x7b2e4d18],
            [0xd72bdbe1, 0x259ad761, 0xc7fa9568, 0x36a13479, 0x1e21b86f, 0xda94bb19, 0x839317ee, 0x3711d2d6],
            array![
                [0xd5b02e4f, 0x6d3bf064, 0x953e899c, 0x826853a7, 0x97b6ea66, 0xb710c6a8, 0x59a2e685, 0x8136c2ab],
                [0xfaacef5b, 0x27e2f9bf, 0xc4fb47f5, 0x798119e7, 0xa0c2d1e6, 0x15281951, 0x478429dc, 0xc4d2464c],
                [0x5b679f51, 0xa2e29bc0, 0x6b549934, 0xe71d2b5b, 0x4b988ab4, 0xfc38030d, 0xa47b7d65, 0xcc3b1453],
                [0xb4acf96e, 0x095c08e8, 0x0877a428, 0x8fbd7c35, 0x9225bc62, 0xfdabecb0, 0xc99e7b30, 0x112e970d],
                [0xcd7663be, 0x7de0ca9b, 0xbcff648e, 0x6f10971c, 0x8213e174, 0x4b6599b5, 0xe35a1dc7, 0x162b2c2c],
                [0x54eb59cf, 0x05e50ef9, 0x94dbee22, 0x1938e7a0, 0xbacceab8, 0x0b288d0b, 0xa411e515, 0xbd20f83f],
                [0xc0769fa3, 0xf80eeb47, 0x9f1f1a7a, 0x764f4a73, 0x4786726c, 0xc5893a90, 0x75af47a1, 0x991d32c0],
                [0xdaf27c9e, 0x29febe9d, 0x01e03b47, 0xea0f59d7, 0x464ec476, 0x09dfb409, 0x164a00c6, 0xb53d3305],
                [0x70a3d025, 0xf052260b, 0x4787dbdb, 0xc77cea24, 0x3d18cf56, 0x91b81ac6, 0xb49a4a35, 0xadccd6e3],
                [0xe209f458, 0xe4051f4f, 0x5a8529c6, 0x3de7b8b2, 0x9e316c5d, 0xc76cb666, 0xcb330f91, 0xdbb0c0b5],
                [0x4c7c93a5, 0xa4165a55, 0xf3ac2e26, 0xb4fb9627, 0xb4ef109c, 0xa478c037, 0xacb491b9, 0x0e7729ce],
                [0x04d15441, 0x43bdc0d4, 0xbc944bdd, 0x057301a1, 0xe9c2a746, 0xcc0edc56, 0x6c65da8f, 0x7222775d]
            ].span(),
            0x71f
        );
        verify(root, txId, proof, position);

        // Block height: 170232 Position: 43 txId: f3866dba8a3198a067bd8c4e71d17a60998243cef23f190b142cb125c2095bf9
        let (root, txId, proof, position) = (
            [0xa5978bb9, 0x9e3e810c, 0xdc5fff8e, 0x91e4e4a7, 0x81290292, 0x6f0c2bb7, 0x3f2492d6, 0xfe7242ca],
            [0xf95b09c2, 0x25b12c14, 0x0b193ff2, 0xce438299, 0x607ad171, 0x4e8cbd67, 0xa098318a, 0xba6d86f3],
            array![
                [0xf2358163, 0x7565d0ef, 0x90e99cd1, 0xf1c516e2, 0x9b9cdf93, 0x8ef89ccb, 0x1ea91f67, 0xbfc6fa5e],
                [0x278b30fe, 0xc5d5eee2, 0xac228bf7, 0xeeb72d61, 0xf7bbd1a0, 0xde5cddfc, 0xba5dca95, 0x10fecf33],
                [0xd6b51316, 0xfec0f51b, 0x74e0506b, 0x955e31b5, 0x985fb04a, 0x261df27f, 0x4806cc04, 0x20f816d7],
                [0xe9321bef, 0x356d9e54, 0x955e679f, 0x44f61e56, 0xbd805311, 0xd46402f0, 0x0cfcc510, 0x81928677],
                [0x5e0de7ed, 0xc4f16142, 0xe641c442, 0x445c4d67, 0xb0bea51c, 0x225f2ace, 0x85c1508e, 0x7eb52b08],
                [0x88cddec0, 0x80d2aced, 0x7b5cd35b, 0x834aaaa5, 0x904fe7db, 0xb4c06860, 0x7f60c1f7, 0x28a5730b]
            ].span(),
            0x2b
        );
        verify(root, txId, proof, position);
    }

    //Test on randomly generated merkle tree data
    #[test]
    fn test_valid_random() {
        let (root, txId, proof, position) = (
            [0xe7097a81, 0xa0d7cef1, 0x356d4ffa, 0xe5cd3db0, 0xa8159e2b, 0xdba404c5, 0x4f0ebe76, 0x9170edf8],
            [0x5b19aa15, 0xd331a80e, 0x0bd02f27, 0xedc36dbe, 0xdf46079c, 0x0e47e0a5, 0x148612a4, 0xd72736ff],
            array![
                [0xc4de2921, 0x1fb025e8, 0x56af54fa, 0xde2ff0cc, 0x4f0fab5c, 0x160eeba3, 0xea450b86, 0x2227f4b7],
                [0x5a251f66, 0x6819f48e, 0xa915b1b9, 0xfc2d61e1, 0xd5c86b12, 0x2a19828d, 0x87e074e2, 0x91aa2522],
                [0x5f676949, 0x43008fc6, 0x9a92d6a2, 0x39d54870, 0x775e234e, 0x001e2661, 0x400073bf, 0x1ae52f81],
                [0xe2bab5e0, 0x70e45e32, 0x4fa7eb2f, 0xd2bdfd0e, 0x8c932fba, 0xbce185c5, 0xc089f784, 0xfc6cc195],
                [0x5760248d, 0x0ec88c42, 0x52c414ec, 0x3666a5fb, 0xa2f36689, 0x12d4ca04, 0xeda87e73, 0x996a43ad],
                [0x351f58ea, 0xeeb1d60c, 0xf7df1a4d, 0xc887db07, 0x3c8a4b55, 0xf163ba55, 0x9899c490, 0x762719a5],
                [0xccaf2813, 0x116ea52e, 0x23dd4a34, 0x7014e5c8, 0x3d4c3505, 0x3e3d24a6, 0x63da8d4e, 0x08e77960],
                [0x8c01b83f, 0xdc73340e, 0x7fb3533e, 0xc36a3eed, 0x9b89e55f, 0x6af04e94, 0xcf391abf, 0xf8dc2ef2],
                [0x86d6d9da, 0x3ce0f2c8, 0x47bc5837, 0xbae55068, 0xb38e2162, 0xd9f70801, 0x341213f6, 0xe51813f5]
            ].span(),
            0xa
        );
        verify(root, txId, proof, position);
        
        let (root, txId, proof, position) = (
            [0x58c10e8e, 0x2ecfb174, 0x12f3063f, 0x5c4e7056, 0x16841654, 0xd403bc6a, 0x69ae8716, 0x09f258f3],
            [0x58b0e488, 0x14ac0616, 0xfb93e8d6, 0x1ee9df83, 0xf66fdaf0, 0x67b0ef5b, 0xac67e8d9, 0xfc5c8efc],
            array![
                [0x296d04a0, 0x790cb2b8, 0x3fa475b0, 0x9a1319ab, 0x48a91285, 0x21c344de, 0xb1b2e9ca, 0xe4a4b0c6],
                [0x6de04629, 0xaf412cfe, 0xb234f014, 0x6adaf8b8, 0x636cf165, 0x9971c684, 0x4c6bb6ae, 0x8750b4df],
                [0x823cb365, 0xdc97c1e6, 0x757bc84e, 0x2f8787d9, 0x8ba20725, 0xe8d15062, 0xadb6d22e, 0x6e547f94],
                [0xd4beb09c, 0x12c24629, 0x82360000, 0xd0b7256a, 0xe2942124, 0xa64bd661, 0x3bafa442, 0x600684e8],
                [0xaa51eaf1, 0x5640150a, 0x7cb7e6ea, 0xafca9069, 0x74d74861, 0xeb3dd4d9, 0xc67c1ec3, 0x3810d6ce],
                [0x8ef2155b, 0xb4fcd504, 0xb93730c1, 0xfc4a75ac, 0xb5748aa7, 0x52a47138, 0x683fb7ab, 0xa01cbfbf],
                [0x53e9021a, 0x5489b9bf, 0xceb4d1af, 0xf8a19934, 0xebc5c688, 0xd46288a0, 0x8ea95308, 0xa50f8e22],
                [0x06f4885b, 0x00715a95, 0xf88ae325, 0xf9783c70, 0x338f777a, 0x3664d30a, 0x5aa08618, 0xcc9a263b],
                [0xff6bb010, 0x03d69e86, 0x556b270a, 0xaa740c7d, 0x5d61f644, 0xd8af1128, 0x4d4dee45, 0xc4e34e2e],
                [0xcb004a06, 0x393e91c7, 0xb6d3b1ae, 0x318b22fb, 0x16316e0d, 0xf05ab6f1, 0x5048a51b, 0x5a4a36ac],
                [0x8daafcce, 0x02f347f0, 0x38a321bf, 0x981d7e14, 0x3dd539e3, 0xfafb7908, 0x74c5fcda, 0x2be66bef],
                [0x76b239ee, 0xfad37335, 0x272f308a, 0x1f33054e, 0xdf25b9f6, 0x00db21c0, 0x20ae6fd5, 0x41f71487]
            ].span(),
            0xa6a
        );
        verify(root, txId, proof, position);
        
        let (root, txId, proof, position) = (
            [0xe374409d, 0xa6a6c6d1, 0x1c104e55, 0x18ee2e02, 0xf8f30280, 0xe24912e1, 0xfc49f768, 0xdc111222],
            [0xa594a6a8, 0x2d516616, 0x41a0463f, 0x91c972ed, 0xbb7fe90f, 0xbc1ea181, 0xf2c0b5d3, 0x119aadea],
            array![
                [0xafa107f4, 0x07cb98f8, 0x36bdbcf9, 0x892e1344, 0xf7db3ca4, 0x60151c9d, 0x53da2ca9, 0x4a4efb75],
                [0x8867abb2, 0xd1bdda20, 0x49a8a05b, 0xcc843a03, 0x014cef00, 0x643a4562, 0x57f4f950, 0x11e14dcc],
                [0x480b362b, 0x3bb6afce, 0x313649f6, 0xb0a83c00, 0x054c82c6, 0xe554d802, 0x787671a3, 0xf5e6ef78],
                [0x8e27586a, 0x7ebde192, 0xc165f83b, 0x48d2f4f1, 0xb7f50381, 0x366ffee8, 0x5df590aa, 0xfc1b06fd],
                [0x0f4b7b92, 0x9d1dd474, 0x51125b06, 0x6ae373bb, 0x1a1731ab, 0xd8361ab9, 0x67f52627, 0x1251e52c],
                [0x469afcc7, 0xbbc9deac, 0x0612c3ed, 0xd1a7c958, 0x6068948f, 0x2c07d92f, 0x29dbbc78, 0x16876853],
                [0x57351be2, 0x1d836b6a, 0xb1d0d761, 0xcd82a805, 0xdacee629, 0x91c937e3, 0xf2837f4e, 0x01af1da7],
                [0x3268ea30, 0xf432c6ce, 0xa64ea9a1, 0x4b68eaa9, 0xc084dc3b, 0x1adff382, 0xc071e440, 0xae2a58a7],
                [0x4743594b, 0x716504ca, 0x8a27767a, 0xffaea824, 0xf040a4a3, 0x5d29a824, 0x5d7db86e, 0x29e559d6]
            ].span(),
            0x1b6
        );
        verify(root, txId, proof, position);
        
        let (root, txId, proof, position) = (
            [0x36d55d61, 0x2ea25402, 0xe196f47d, 0x1f5d7369, 0x3ac5c096, 0x2617e185, 0x6d6f3b2b, 0x5e41c2ed],
            [0x14feb921, 0x60cc89cf, 0x1eac6885, 0x958e7cf9, 0xce4b84b0, 0x498b6db0, 0x9ac2b807, 0xa38a4b11],
            array![
                [0xf821068a, 0xad592dc0, 0xa580f2b7, 0xb4ba89f2, 0xc70ff803, 0x92a065e8, 0xe3d27365, 0xd5fb120e],
                [0xf5d39f5d, 0xc503c600, 0x03901e1e, 0x57feecdb, 0x6a26f351, 0x925e0c16, 0x8eb69513, 0x0bb61d6e],
                [0x7a01f45c, 0xf10d14e9, 0x2d3c8116, 0x9fff2590, 0x7df3dde9, 0x7e76e81f, 0xd792a2eb, 0x89f1b1fd],
                [0x4eb52223, 0x11d6b5cc, 0xbadee9fb, 0x35dea7c6, 0xbd86f696, 0x8873ea6a, 0xa7bed77e, 0x5c7cb38f],
                [0x52a80f5e, 0xc8ea5291, 0x237f35b4, 0x38115b22, 0x873829c9, 0x4554cfbc, 0xf4e77adf, 0xf049a20a],
                [0x2099e2b2, 0x40263fa8, 0x26530636, 0x4048f171, 0x9fe8729e, 0x7c608dbe, 0xad3f1c44, 0x3d1c19af],
                [0xcaa76352, 0x801e11e3, 0xd19271ec, 0x939e96a1, 0x93e4ed65, 0x856439fc, 0xdb3b9f38, 0x6930abac],
                [0xe18e7cde, 0x87e04c8e, 0x4c963d67, 0x317938e6, 0x899546b5, 0x6eb0a608, 0x689db564, 0x1b3604d0],
                [0x1b5ed250, 0x89bac50b, 0x6343833a, 0x3a2aec4f, 0xea2410f6, 0x6cc542b2, 0xd778c311, 0xa15854c9],
                [0x8eed7300, 0xbcad7591, 0xb5888c59, 0x30fa8463, 0xde7131fd, 0x215f718e, 0xa48e8cc6, 0x1705bd3c],
                [0x02102df4, 0x82f316b9, 0x284bd615, 0x24ec6beb, 0x08583b87, 0xd36bb77a, 0xf0826112, 0xbb867d7d],
                [0xe0928a34, 0x2135e57f, 0xb4cf2f2c, 0x17be7a7c, 0xf1ab6afc, 0x1a681390, 0xfed0efea, 0x8d0c7a1c],
                [0xa56af3c7, 0x4275a6b8, 0x9c5913dc, 0xd7440141, 0x47d8c495, 0x21e3b2c8, 0x29ab6846, 0xc11aff29]
            ].span(),
            0x1063
        );
        verify(root, txId, proof, position);
        
        let (root, txId, proof, position) = (
            [0x18a5c462, 0x3b83afb9, 0xd7a50492, 0x35b7e92a, 0x583ea754, 0xaffbe49c, 0xb2a93ba5, 0x32bbfc58],
            [0xf758b006, 0x3b2b92b0, 0x476be60b, 0x0b0d4492, 0xbf06b4b1, 0x08683026, 0x39a2a354, 0xf190c738],
            array![
                [0x78fadea3, 0xbc17c758, 0x58d052b4, 0x046e50ac, 0x6d1d5cb6, 0x230d35af, 0x0f51d131, 0x3555c860],
                [0x4a9e6b14, 0x78d531ab, 0xfbf7403c, 0x45221027, 0xe2a171d1, 0x7a2a35cf, 0x4f9dd024, 0xe1dadbb1],
                [0xfcc8f421, 0xcf0bee33, 0xf175fc68, 0xc9f4c432, 0x91af2931, 0x63d52b59, 0x4f83ee3a, 0x14509002],
                [0xdfde9f95, 0x6e8a4fb0, 0x04d48123, 0x0542b288, 0xe7f2073c, 0xab8bba9b, 0x2eedf3d1, 0xbbe09ddd],
                [0xb54b8324, 0xc3103ba3, 0xd0cebe42, 0xc869a6e3, 0x5ee95f5a, 0x51113ab2, 0x3f6324da, 0xab6f40ef],
                [0xa0ace1a1, 0x3ad368de, 0xb507de8e, 0x621a54be, 0x192535b9, 0x020d7c4a, 0x2abac1ac, 0x14c8654c],
                [0x91781086, 0xbd5154cb, 0x9cff8a1e, 0x26eaf463, 0xf0d27034, 0xfcc5f9f2, 0x88327b97, 0x9468b48c],
                [0x9599a6bd, 0xaedd16a1, 0xfc94c2f2, 0x5e8b2021, 0x12765531, 0x34414238, 0xfa632c8e, 0xb2d5baae],
                [0x1bcfccde, 0xe28f2a2b, 0xcb2a0f88, 0x973634ac, 0xb520f854, 0x64b87a25, 0x5314e038, 0x1260bc6d],
                [0x520567ae, 0x07f2f141, 0x6908da99, 0xdf7dc594, 0xa8fc0d5c, 0x28ffaa1b, 0xcc0b15f8, 0x132c5414],
                [0xf2731a76, 0xb30f54cc, 0xbc9d8a07, 0x86518891, 0x8f1f35fa, 0x847faf46, 0x9bb9d1dc, 0xe7d768e2],
                [0x1eed6639, 0x682b0137, 0x8e24d89f, 0x016abace, 0x5191a8b0, 0xdf656a3c, 0x53a0c6e0, 0x9e4ee1f0],
                [0x9efb99cd, 0xa6e2eea4, 0xa8b631f5, 0x172e2474, 0xb8ae9bf8, 0x23c6b889, 0xafaac514, 0x418a5b6a],
                [0x2d43e1c9, 0x4a36fb92, 0xd742b70a, 0xbcf27777, 0xb5b34b85, 0xeaa31871, 0x9a7e01cd, 0x4e814a4e],
                [0x67a6bab6, 0x18a026a9, 0x7b9e5e26, 0x5b5236a9, 0x6947164c, 0xc3058495, 0xa10c4a01, 0x97776d20],
                [0xc10ecea2, 0x776a84bf, 0xaa047034, 0x877f5f1b, 0x89243028, 0xadaaecde, 0xf4b5a478, 0xf17fccf3],
                [0x21d64a7e, 0x502fbb7c, 0x2f858af1, 0x3bce77e8, 0xe044cf9a, 0x46a88276, 0x07e952d0, 0x90353dd5],
                [0xea929d9c, 0x7de221ae, 0xa24ccace, 0x743d57e0, 0xe870538e, 0x84d19e22, 0xa4cc90f7, 0xdfdab6d4],
                [0x82c028d2, 0x7b2e9dad, 0x09bcde44, 0x2c27a27c, 0x939a6007, 0xb507fde8, 0x723fd557, 0x63b787e3],
                [0x91012534, 0x0639b9df, 0x0b58392e, 0x2a64d45b, 0x6ca522f7, 0xd6f8ffa7, 0x18017f53, 0x688e9c27],
                [0x995e318d, 0x8980cd19, 0x5302e1ad, 0x5b2367e3, 0xbc0daf2a, 0x9a8d036c, 0x86616937, 0xbe462b76],
                [0x8b8f2c34, 0x122da23e, 0xbe262a94, 0x46e026f0, 0x069be378, 0x54c81897, 0x23857732, 0x74315088],
                [0x5d83b416, 0x2141a313, 0xc2af70e4, 0xae971426, 0x11c5d2e7, 0xba2748b0, 0xd8a1a8d8, 0x018152e1]
            ].span(),
            0x7b13f1
        );
        verify(root, txId, proof, position);
        
        let (root, txId, proof, position) = (
            [0xc5968cc2, 0x356073f8, 0xa1783d3f, 0xf009eb56, 0xb70b58ad, 0x780f87ea, 0xd1a4f31c, 0xd373e0cd],
            [0x0223cab9, 0x0d60141d, 0xf14e06b3, 0x207aabb4, 0xb075af29, 0xc5e11c51, 0xa3a0299d, 0x44095d66],
            array![
                [0x1600c56d, 0xb7bec477, 0xbb7f1ad0, 0x5a46d80f, 0x0a990165, 0x89072e7e, 0xd6db8a85, 0x2760b156],
                [0xb02cb9c3, 0x33995c7a, 0x06ae9b34, 0x07c48688, 0x39b24e95, 0xe05864a7, 0xef9bb3c0, 0xb6d54697]
            ].span(),
            0x2
        );
        verify(root, txId, proof, position);
        
        let (root, txId, proof, position) = (
            [0x497d7f4d, 0x0919e655, 0x3260f17e, 0x735b451a, 0xea20788c, 0xca44822a, 0x8c63ec9f, 0x71d68cd9],
            [0x73f5bb87, 0x64255e79, 0x32f41d3d, 0x3b01c251, 0x4fb7527d, 0xdc7540d7, 0xfc305029, 0xc957aab4],
            array![
                [0x2d88706c, 0xddba41cc, 0xb1b9cf4f, 0x54aaac00, 0x2e0bcd62, 0xcee748f3, 0xb4cb08f8, 0x4ea58257],
                [0x59936836, 0xc085f190, 0x938456e0, 0x142349b2, 0x9a46a443, 0x67a0a477, 0xeae12508, 0xa016f4a4],
                [0x443bc66c, 0xfa1d4996, 0x41f66685, 0xf6ef17bb, 0x587af693, 0x312bc3e1, 0x029b1eca, 0xdfefc1fa],
                [0xd65b4029, 0x62ac3cbf, 0x0c3ef5b8, 0x8f5426f8, 0xa50bec11, 0xd32ed7f7, 0xbc96f177, 0x907370b0],
                [0xf6af1762, 0xc5c9ca77, 0x255cf09e, 0x1530264f, 0x47b6aef4, 0xd76ddd98, 0x32a0a203, 0xf9599335],
                [0xc312f929, 0x36dfcd38, 0x41386e5f, 0xd5f339ad, 0x90fca9c9, 0x98b2b4fd, 0xe7e7dc9b, 0x4f23685f],
                [0xf186a78f, 0x637537b7, 0x3b809a13, 0x6ef6014e, 0xb8da26d4, 0x2161318f, 0x1eccde21, 0xcee9bab9],
                [0x82f04244, 0x397b5891, 0x9094d1e0, 0x10d0fc41, 0xd6a067eb, 0xc3594a08, 0xedd04d4f, 0xd2b369da],
                [0xe1f2c260, 0xf1f80774, 0x0950311f, 0x9ebe36d9, 0x5d086104, 0x53bd42fa, 0xba02e954, 0x3a37aeea],
                [0xdd65d7a5, 0xdc4fbaae, 0xee9e63a3, 0x653c72f4, 0x05eb3a42, 0x74150c51, 0x96874967, 0x74d53d4f],
                [0xfafd0f6c, 0x9180e01e, 0x7302bbee, 0xcbecb3df, 0xbc5cf3e4, 0x4197d8ac, 0xb4525f1d, 0x0cf9a8be],
                [0xd10b0c47, 0x2e7d033d, 0x298b9e83, 0x0ae5ec9a, 0xa343865b, 0x17045eb0, 0x917afa8f, 0xadc51aef],
                [0xc57d8072, 0x8e93befe, 0x162c497e, 0x703aaf1d, 0x8b202fcf, 0xf418f89e, 0xa3b02e08, 0xaebe0998],
                [0xf506d3bd, 0x49a86972, 0xe79688a4, 0xde80b487, 0x611af08c, 0x2778a585, 0x5a094d02, 0x85a5a9f0],
                [0x25a29233, 0x1039a8ad, 0x75bb5336, 0x7f426890, 0x74318a57, 0x32c60773, 0x116646cc, 0x8cdaa707],
                [0xe396ae1b, 0xdf1bea0e, 0xe7218c4a, 0x117a2ca7, 0x229a317e, 0xb947a338, 0x04462a85, 0xd458f4c2],
                [0x93379bd6, 0xcf1d0fc5, 0x41085add, 0x1f61bb1c, 0x38aa8607, 0xb4f83dfc, 0x9ae61b54, 0x023cad47],
                [0xe161b5dd, 0x85734eb4, 0x7bb1724a, 0xdcef5cc6, 0x8a884bb5, 0x8bb890c3, 0x0421ef10, 0xc323a866],
                [0x55a6bc10, 0xdb8c5d40, 0xc912218f, 0x19f43dfe, 0xd190e9f4, 0xcf356e7d, 0xee65e2df, 0x4e19f547],
                [0x093eb567, 0x8f9afdf2, 0x524e577c, 0xc423ddbd, 0x158075a3, 0xb9d1491b, 0xae3e3c6e, 0x1971b985],
                [0x2a586bd1, 0x26eb3b4e, 0xfec36e8e, 0x5c2b50e1, 0x9d1b4ea6, 0x42c1001a, 0x865ff2b9, 0xdf2e6eeb]
            ].span(),
            0x1d3a38
        );
        verify(root, txId, proof, position);
        
        let (root, txId, proof, position) = (
            [0xf20cc1e6, 0xfc5b0f49, 0x0d28d96a, 0x8228ee29, 0x53a4841e, 0x47ccd4d2, 0xb646b526, 0x07e56979],
            [0x5b8f8c8b, 0x1237c5c4, 0x743363a9, 0x733389fa, 0xc45fee66, 0x370534d2, 0x469d92e9, 0xe1d038ea],
            array![
                [0xbcc40116, 0x101610ce, 0xf623d7bc, 0x139f2349, 0xe788f09f, 0xf6c85ca2, 0x3fe58845, 0x7d093fa0],
                [0x71144669, 0x52ee7d6a, 0x06ceca47, 0x7dc838ca, 0xcea752a3, 0xe1080083, 0x5811f5b6, 0xb4d5ac03],
                [0xa160bb77, 0xf2771162, 0xc0ef5c34, 0x71aa8476, 0xcd51ed4a, 0x28e4929a, 0xa3074e6f, 0x0e4c4fcc],
                [0xa4e9c511, 0x9fd45997, 0x00b39865, 0x22c9ec69, 0xcd495562, 0x454b720c, 0xb8d8b207, 0xf8c5e101],
                [0x09469c9d, 0x98f160d0, 0x0c1e3fc2, 0xae0cf739, 0x342656f7, 0x40028ab0, 0x2b76b715, 0x27661d81],
                [0xc083d352, 0x04f3caec, 0x46bfbca1, 0x63fd9b4a, 0x94869cc7, 0xb4e5b39c, 0xa5de8c38, 0x9a0fcdf4]
            ].span(),
            0x6
        );
        verify(root, txId, proof, position);
        
        let (root, txId, proof, position) = (
            [0x87c2c6e2, 0xd0848ccd, 0xdb81749c, 0x1b6cb599, 0x87d769bc, 0x98abe692, 0xf523d163, 0x67fcfdb3],
            [0x1e171e80, 0xe6857584, 0x01a5f05c, 0x8c382570, 0xf7f098da, 0x81de5ca0, 0x63ed1d1c, 0x3cf75b09],
            array![
                [0x84385f5e, 0xf21d5dae, 0x052e8d17, 0x631cd964, 0x8f058ed8, 0xc9db9254, 0x7e6ce167, 0x06b4dbca],
                [0x6a463ef0, 0x026e55dc, 0xf49f2e39, 0x0f6397ab, 0x59d6858b, 0xecaa32b9, 0x1f40f374, 0x5b795879],
                [0x57d29275, 0xf5cb6232, 0x633d9484, 0x90c87cb1, 0x170f886d, 0xd93b6f21, 0x3acab875, 0xc10dfec9],
                [0x77421cc2, 0xd412b0c3, 0xdfb533d4, 0x70b9c9c2, 0xf0831356, 0xa694cd9f, 0xac7dc907, 0xedb330c2],
                [0xffe46e61, 0x11f8ada9, 0x719df78f, 0xd07aaf13, 0x6478f10d, 0x2cae3f60, 0x39c7fd88, 0xccf2a86b],
                [0x0eb8eb2a, 0x3256b704, 0xa7a4405f, 0xd4194a67, 0x30ccfcfa, 0xce4cf6b7, 0xb9a1dbcb, 0x19167eaf]
            ].span(),
            0x30
        );
        verify(root, txId, proof, position);
        
        let (root, txId, proof, position) = (
            [0x0fb1b18e, 0xb8b01b2c, 0x09e1466c, 0xf595bcbd, 0xb1ed1860, 0xfa938901, 0x3e6c62bc, 0xd6dd5230],
            [0x38cf8f5b, 0x23a0fb2b, 0x469cdcb4, 0x62c6b2cf, 0xdd84d566, 0xa97d8d41, 0x227c2ed5, 0xb6b977cd],
            array![
                [0x3bee494f, 0xf2400092, 0x5ef1f91e, 0xe9a73256, 0x424160ec, 0x807db483, 0x36529511, 0x01a56d3f],
                [0xa4a1533d, 0x6e7b6942, 0x7af12d69, 0xd376c64d, 0xf0a4d5eb, 0x323bac97, 0x55fe8b61, 0x0244a434],
                [0xa6ffe485, 0x891b4dd6, 0x8df624a8, 0x599acce5, 0x771e1bf6, 0x10241581, 0x9fbedd28, 0x40a114ba],
                [0xf27cb549, 0xa33bff7f, 0xaa2762e7, 0x6eb1db54, 0x53d30c71, 0xdf70953f, 0x53894b2d, 0xb10be60e],
                [0x8d4b353d, 0x82fdcff2, 0x19c0dd91, 0xda4dd81c, 0x42867ba7, 0xc050d91b, 0xcf620b65, 0x1c64e75f],
                [0x6286601d, 0x94ad859c, 0x137e564d, 0xdbfa757b, 0x63dd2c39, 0xd9387517, 0x4d90d1a1, 0x7a0d4df5],
                [0xa2b65198, 0xd724a2fd, 0x150abba6, 0xb00766f3, 0x520acd71, 0x4a43eaad, 0xaeecc227, 0xc068af20],
                [0x26714514, 0xba1cefc8, 0xe2ff7830, 0x98c504c1, 0x56f85b59, 0xea75cba9, 0x0a123241, 0xa8fd30de],
                [0x1d437476, 0xb8b92868, 0xce688197, 0xcb64db83, 0x4cfaf8c7, 0xea3b01aa, 0x7548dea6, 0x54bceb13],
                [0x5ef68eaa, 0xb2405ace, 0x30b400ac, 0xe53674ad, 0xf7d0625f, 0x6f8e4d34, 0x13a1300e, 0x6d2b03c2],
                [0x14083dc5, 0xaa90754f, 0xb6ef09a5, 0x8af293fc, 0x814f973b, 0xd5c11d65, 0x36ad226c, 0xe927a05b],
                [0xbb0fd1da, 0x91286619, 0x1b318cee, 0xc6ee2b9f, 0x0d3c9e97, 0xa014e069, 0xb2748a39, 0x74cfb81c],
                [0xed5f9495, 0x16125a22, 0x5eaff6c8, 0x54a0907b, 0x8123301c, 0x397d919c, 0xaf6e42d0, 0x7bf3ce8c],
                [0x672e7d93, 0xf0b39e69, 0x656304ff, 0xa90da045, 0x2cb895c0, 0x7d8b54af, 0x40870302, 0xe616f26e],
                [0xbf9af1e4, 0x832cba6a, 0x3551c2f6, 0xcd623116, 0x86d231a0, 0x660112cd, 0x2560b986, 0xb2de2b50]
            ].span(),
            0x5901
        );
        verify(root, txId, proof, position);
    }

    //Try to change the leaf and see if the proof turns invalid
    #[test]
    #[should_panic(expected: 'merkle_tree: verify failed')]
    fn test_invalid_change_leaf() {
        let (root, txId, proof, position) = (
            [0x0fb1b18e, 0xb8b01b2c, 0x09e1466c, 0xf595bcbd, 0xb1ed1860, 0xfa938901, 0x3e6c62bc, 0xd6dd5230],
            [0x38cf8f5b, 0x23a0fb2b, 0x469cdcb4, 0x62c6b2cf, 0xdd84d566, 0xa97d8d41, 0x127c2ed5, 0xb6b977cd],
            array![
                [0x3bee494f, 0xf2400092, 0x5ef1f91e, 0xe9a73256, 0x424160ec, 0x807db483, 0x36529511, 0x01a56d3f],
                [0xa4a1533d, 0x6e7b6942, 0x7af12d69, 0xd376c64d, 0xf0a4d5eb, 0x323bac97, 0x55fe8b61, 0x0244a434],
                [0xa6ffe485, 0x891b4dd6, 0x8df624a8, 0x599acce5, 0x771e1bf6, 0x10241581, 0x9fbedd28, 0x40a114ba],
                [0xf27cb549, 0xa33bff7f, 0xaa2762e7, 0x6eb1db54, 0x53d30c71, 0xdf70953f, 0x53894b2d, 0xb10be60e],
                [0x8d4b353d, 0x82fdcff2, 0x19c0dd91, 0xda4dd81c, 0x42867ba7, 0xc050d91b, 0xcf620b65, 0x1c64e75f],
                [0x6286601d, 0x94ad859c, 0x137e564d, 0xdbfa757b, 0x63dd2c39, 0xd9387517, 0x4d90d1a1, 0x7a0d4df5],
                [0xa2b65198, 0xd724a2fd, 0x150abba6, 0xb00766f3, 0x520acd71, 0x4a43eaad, 0xaeecc227, 0xc068af20],
                [0x26714514, 0xba1cefc8, 0xe2ff7830, 0x98c504c1, 0x56f85b59, 0xea75cba9, 0x0a123241, 0xa8fd30de],
                [0x1d437476, 0xb8b92868, 0xce688197, 0xcb64db83, 0x4cfaf8c7, 0xea3b01aa, 0x7548dea6, 0x54bceb13],
                [0x5ef68eaa, 0xb2405ace, 0x30b400ac, 0xe53674ad, 0xf7d0625f, 0x6f8e4d34, 0x13a1300e, 0x6d2b03c2],
                [0x14083dc5, 0xaa90754f, 0xb6ef09a5, 0x8af293fc, 0x814f973b, 0xd5c11d65, 0x36ad226c, 0xe927a05b],
                [0xbb0fd1da, 0x91286619, 0x1b318cee, 0xc6ee2b9f, 0x0d3c9e97, 0xa014e069, 0xb2748a39, 0x74cfb81c],
                [0xed5f9495, 0x16125a22, 0x5eaff6c8, 0x54a0907b, 0x8123301c, 0x397d919c, 0xaf6e42d0, 0x7bf3ce8c],
                [0x672e7d93, 0xf0b39e69, 0x656304ff, 0xa90da045, 0x2cb895c0, 0x7d8b54af, 0x40870302, 0xe616f26e],
                [0xbf9af1e4, 0x832cba6a, 0x3551c2f6, 0xcd623116, 0x86d231a0, 0x660112cd, 0x2560b986, 0xb2de2b50]
            ].span(),
            0x5901
        );
        verify(root, txId, proof, position);
    }

    //Try to change the root and see if the proof turns invalid
    #[test]
    #[should_panic(expected: 'merkle_tree: verify failed')]
    fn test_invalid_change_root() {
        let (root, txId, proof, position) = (
            [0x0fb1b18e, 0xb8b01b2c, 0x09e1466c, 0xf595bcbd, 0xb1ed1860, 0xfa938901, 0x3e6c62bc, 0xd6dd523F],
            [0x38cf8f5b, 0x23a0fb2b, 0x469cdcb4, 0x62c6b2cf, 0xdd84d566, 0xa97d8d41, 0x227c2ed5, 0xb6b977cd],
            array![
                [0x3bee494f, 0xf2400092, 0x5ef1f91e, 0xe9a73256, 0x424160ec, 0x807db483, 0x36529511, 0x01a56d3f],
                [0xa4a1533d, 0x6e7b6942, 0x7af12d69, 0xd376c64d, 0xf0a4d5eb, 0x323bac97, 0x55fe8b61, 0x0244a434],
                [0xa6ffe485, 0x891b4dd6, 0x8df624a8, 0x599acce5, 0x771e1bf6, 0x10241581, 0x9fbedd28, 0x40a114ba],
                [0xf27cb549, 0xa33bff7f, 0xaa2762e7, 0x6eb1db54, 0x53d30c71, 0xdf70953f, 0x53894b2d, 0xb10be60e],
                [0x8d4b353d, 0x82fdcff2, 0x19c0dd91, 0xda4dd81c, 0x42867ba7, 0xc050d91b, 0xcf620b65, 0x1c64e75f],
                [0x6286601d, 0x94ad859c, 0x137e564d, 0xdbfa757b, 0x63dd2c39, 0xd9387517, 0x4d90d1a1, 0x7a0d4df5],
                [0xa2b65198, 0xd724a2fd, 0x150abba6, 0xb00766f3, 0x520acd71, 0x4a43eaad, 0xaeecc227, 0xc068af20],
                [0x26714514, 0xba1cefc8, 0xe2ff7830, 0x98c504c1, 0x56f85b59, 0xea75cba9, 0x0a123241, 0xa8fd30de],
                [0x1d437476, 0xb8b92868, 0xce688197, 0xcb64db83, 0x4cfaf8c7, 0xea3b01aa, 0x7548dea6, 0x54bceb13],
                [0x5ef68eaa, 0xb2405ace, 0x30b400ac, 0xe53674ad, 0xf7d0625f, 0x6f8e4d34, 0x13a1300e, 0x6d2b03c2],
                [0x14083dc5, 0xaa90754f, 0xb6ef09a5, 0x8af293fc, 0x814f973b, 0xd5c11d65, 0x36ad226c, 0xe927a05b],
                [0xbb0fd1da, 0x91286619, 0x1b318cee, 0xc6ee2b9f, 0x0d3c9e97, 0xa014e069, 0xb2748a39, 0x74cfb81c],
                [0xed5f9495, 0x16125a22, 0x5eaff6c8, 0x54a0907b, 0x8123301c, 0x397d919c, 0xaf6e42d0, 0x7bf3ce8c],
                [0x672e7d93, 0xf0b39e69, 0x656304ff, 0xa90da045, 0x2cb895c0, 0x7d8b54af, 0x40870302, 0xe616f26e],
                [0xbf9af1e4, 0x832cba6a, 0x3551c2f6, 0xcd623116, 0x86d231a0, 0x660112cd, 0x2560b986, 0xb2de2b50]
            ].span(),
            0x5901
        );
        verify(root, txId, proof, position);
    }

    //Try to change the proof and see if the proof turns invalid
    #[test]
    #[should_panic(expected: 'merkle_tree: verify failed')]
    fn test_invalid_change_proof() {
        let (root, txId, proof, position) = (
            [0x0fb1b18e, 0xb8b01b2c, 0x09e1466c, 0xf595bcbd, 0xb1ed1860, 0xfa938901, 0x3e6c62bc, 0xd6dd5230],
            [0x38cf8f5b, 0x23a0fb2b, 0x469cdcb4, 0x62c6b2cf, 0xdd84d566, 0xa97d8d41, 0x227c2ed5, 0xb6b977cd],
            array![
                [0x3bee494f, 0xf2400092, 0x5ef1f91e, 0xe9a73256, 0x424160ec, 0x807db483, 0x36529511, 0x01a56d3f],
                [0xa4a1533d, 0x6e7b6942, 0x7af12d69, 0xd376c64d, 0xf0a4d5eb, 0x323bac97, 0x55fe8b61, 0x0244a434],
                [0xa6ffe485, 0x891b4dd6, 0x8df624a8, 0x599acce5, 0x771e1bf6, 0x10241581, 0x9fbedd28, 0x40a114ba],
                [0xf27cb549, 0xa33bff7f, 0xaa2762e7, 0x6eb1db54, 0x53d30c71, 0xdf70953f, 0x53894b2d, 0xb10be60e],
                [0x8d4b353d, 0x82fdcff2, 0x19c0dd91, 0xda4dd81c, 0x42867ba7, 0xc050d91b, 0xcf620b65, 0x1c64e75f],
                [0x6286601d, 0x94ad859c, 0x137e564d, 0xdbfa757b, 0x63dd2c39, 0xd9387517, 0x4d90d1a1, 0x7a0d4df5],
                [0xa2b65198, 0xd724a2fd, 0x150abba6, 0xb00766f3, 0x520acd71, 0x4a43eaad, 0xaeecc227, 0xc068af20],
                [0x26714514, 0xba1cefc8, 0xe2ff7830, 0x98c504c1, 0x56f85b59, 0xea75cba9, 0x0a123241, 0xa8fd30de],
                [0x1d437476, 0xb8b92868, 0xce688197, 0xcb64db83, 0x4cfaf8c7, 0xea3b01aa, 0x7548dea6, 0x54bceb13],
                [0x5ef68eaa, 0xb2405ace, 0x30b400ac, 0xe53674ad, 0xf7d0625f, 0x6f8e4d34, 0x13a1300e, 0x6d2b03cF],
                [0x14083dc5, 0xaa90754f, 0xb6ef09a5, 0x8af293fc, 0x814f973b, 0xd5c11d65, 0x36ad226c, 0xe927a05b],
                [0xbb0fd1da, 0x91286619, 0x1b318cee, 0xc6ee2b9f, 0x0d3c9e97, 0xa014e069, 0xb2748a39, 0x74cfb81c],
                [0xed5f9495, 0x16125a22, 0x5eaff6c8, 0x54a0907b, 0x8123301c, 0x397d919c, 0xaf6e42d0, 0x7bf3ce8c],
                [0x672e7d93, 0xf0b39e69, 0x656304ff, 0xa90da045, 0x2cb895c0, 0x7d8b54af, 0x40870302, 0xe616f26e],
                [0xbf9af1e4, 0x832cba6a, 0x3551c2f6, 0xcd623116, 0x86d231a0, 0x660112cd, 0x2560b986, 0xb2de2b50]
            ].span(),
            0x5901
        );
        verify(root, txId, proof, position);
    }

    //Try to change the proof length and see if the proof turns invalid
    #[test]
    #[should_panic(expected: 'merkle_tree: verify failed')]
    fn test_invalid_change_proof_len() {
        let (root, txId, proof, position) = (
            [0x0fb1b18e, 0xb8b01b2c, 0x09e1466c, 0xf595bcbd, 0xb1ed1860, 0xfa938901, 0x3e6c62bc, 0xd6dd5230],
            [0x38cf8f5b, 0x23a0fb2b, 0x469cdcb4, 0x62c6b2cf, 0xdd84d566, 0xa97d8d41, 0x227c2ed5, 0xb6b977cd],
            array![
                [0x3bee494f, 0xf2400092, 0x5ef1f91e, 0xe9a73256, 0x424160ec, 0x807db483, 0x36529511, 0x01a56d3f],
                [0xa4a1533d, 0x6e7b6942, 0x7af12d69, 0xd376c64d, 0xf0a4d5eb, 0x323bac97, 0x55fe8b61, 0x0244a434],
                [0xa6ffe485, 0x891b4dd6, 0x8df624a8, 0x599acce5, 0x771e1bf6, 0x10241581, 0x9fbedd28, 0x40a114ba],
                [0xf27cb549, 0xa33bff7f, 0xaa2762e7, 0x6eb1db54, 0x53d30c71, 0xdf70953f, 0x53894b2d, 0xb10be60e],
                [0x8d4b353d, 0x82fdcff2, 0x19c0dd91, 0xda4dd81c, 0x42867ba7, 0xc050d91b, 0xcf620b65, 0x1c64e75f],
                [0x6286601d, 0x94ad859c, 0x137e564d, 0xdbfa757b, 0x63dd2c39, 0xd9387517, 0x4d90d1a1, 0x7a0d4df5],
                [0xa2b65198, 0xd724a2fd, 0x150abba6, 0xb00766f3, 0x520acd71, 0x4a43eaad, 0xaeecc227, 0xc068af20],
                [0x26714514, 0xba1cefc8, 0xe2ff7830, 0x98c504c1, 0x56f85b59, 0xea75cba9, 0x0a123241, 0xa8fd30de],
                [0x1d437476, 0xb8b92868, 0xce688197, 0xcb64db83, 0x4cfaf8c7, 0xea3b01aa, 0x7548dea6, 0x54bceb13],
                [0x5ef68eaa, 0xb2405ace, 0x30b400ac, 0xe53674ad, 0xf7d0625f, 0x6f8e4d34, 0x13a1300e, 0x6d2b03c2],
                [0x14083dc5, 0xaa90754f, 0xb6ef09a5, 0x8af293fc, 0x814f973b, 0xd5c11d65, 0x36ad226c, 0xe927a05b],
                [0xbb0fd1da, 0x91286619, 0x1b318cee, 0xc6ee2b9f, 0x0d3c9e97, 0xa014e069, 0xb2748a39, 0x74cfb81c],
                [0xed5f9495, 0x16125a22, 0x5eaff6c8, 0x54a0907b, 0x8123301c, 0x397d919c, 0xaf6e42d0, 0x7bf3ce8c],
                [0x672e7d93, 0xf0b39e69, 0x656304ff, 0xa90da045, 0x2cb895c0, 0x7d8b54af, 0x40870302, 0xe616f26e]
            ].span(),
            0x5901
        );
        verify(root, txId, proof, position);
    }

    //Try to change the position/index and see if the proof turns invalid
    #[test]
    #[should_panic(expected: 'merkle_tree: verify failed')]
    fn test_invalid_change_position() {
        let (root, txId, proof, position) = (
            [0x0fb1b18e, 0xb8b01b2c, 0x09e1466c, 0xf595bcbd, 0xb1ed1860, 0xfa938901, 0x3e6c62bc, 0xd6dd5230],
            [0x38cf8f5b, 0x23a0fb2b, 0x469cdcb4, 0x62c6b2cf, 0xdd84d566, 0xa97d8d41, 0x227c2ed5, 0xb6b977cd],
            array![
                [0x3bee494f, 0xf2400092, 0x5ef1f91e, 0xe9a73256, 0x424160ec, 0x807db483, 0x36529511, 0x01a56d3f],
                [0xa4a1533d, 0x6e7b6942, 0x7af12d69, 0xd376c64d, 0xf0a4d5eb, 0x323bac97, 0x55fe8b61, 0x0244a434],
                [0xa6ffe485, 0x891b4dd6, 0x8df624a8, 0x599acce5, 0x771e1bf6, 0x10241581, 0x9fbedd28, 0x40a114ba],
                [0xf27cb549, 0xa33bff7f, 0xaa2762e7, 0x6eb1db54, 0x53d30c71, 0xdf70953f, 0x53894b2d, 0xb10be60e],
                [0x8d4b353d, 0x82fdcff2, 0x19c0dd91, 0xda4dd81c, 0x42867ba7, 0xc050d91b, 0xcf620b65, 0x1c64e75f],
                [0x6286601d, 0x94ad859c, 0x137e564d, 0xdbfa757b, 0x63dd2c39, 0xd9387517, 0x4d90d1a1, 0x7a0d4df5],
                [0xa2b65198, 0xd724a2fd, 0x150abba6, 0xb00766f3, 0x520acd71, 0x4a43eaad, 0xaeecc227, 0xc068af20],
                [0x26714514, 0xba1cefc8, 0xe2ff7830, 0x98c504c1, 0x56f85b59, 0xea75cba9, 0x0a123241, 0xa8fd30de],
                [0x1d437476, 0xb8b92868, 0xce688197, 0xcb64db83, 0x4cfaf8c7, 0xea3b01aa, 0x7548dea6, 0x54bceb13],
                [0x5ef68eaa, 0xb2405ace, 0x30b400ac, 0xe53674ad, 0xf7d0625f, 0x6f8e4d34, 0x13a1300e, 0x6d2b03c2],
                [0x14083dc5, 0xaa90754f, 0xb6ef09a5, 0x8af293fc, 0x814f973b, 0xd5c11d65, 0x36ad226c, 0xe927a05b],
                [0xbb0fd1da, 0x91286619, 0x1b318cee, 0xc6ee2b9f, 0x0d3c9e97, 0xa014e069, 0xb2748a39, 0x74cfb81c],
                [0xed5f9495, 0x16125a22, 0x5eaff6c8, 0x54a0907b, 0x8123301c, 0x397d919c, 0xaf6e42d0, 0x7bf3ce8c],
                [0x672e7d93, 0xf0b39e69, 0x656304ff, 0xa90da045, 0x2cb895c0, 0x7d8b54af, 0x40870302, 0xe616f26e],
                [0xbf9af1e4, 0x832cba6a, 0x3551c2f6, 0xcd623116, 0x86d231a0, 0x660112cd, 0x2560b986, 0xb2de2b50]
            ].span(),
            0x590F
        );
        verify(root, txId, proof, position);
    }

}

