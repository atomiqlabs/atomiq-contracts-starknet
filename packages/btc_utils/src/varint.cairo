use crate::byte_array::{ByteArrayReader, ByteArrayReaderTrait};

pub fn read(data: @ByteArray, position: usize) -> (u64, usize) {
    let first = data.at(position).expect('Array index out of bounds');
    if first==0xFD {
        return (data.read_u16_le(position+1).into(), 3);
    }
    if first==0xFE {
        return (data.read_u32_le(position+1).into(), 5);
    }
    if first==0xFF {
        return (data.read_u64_le(position+1).into(), 9);
    }
    (first.into(), 1)
}


#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_manual() {
        //Test cases from: https://wiki.bitcoinsv.io/index.php/VarInt
        let mut serialized_byte_array = array![0x0, 0xBB, 1].span();
        assert_eq!(
            read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 0),
            (0xBB, 1)
        );

        let mut serialized_byte_array = array![0x0, 0xFDFF00, 3].span();
        assert_eq!(
            read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 0),
            (0xFF, 3)
        );

        let mut serialized_byte_array = array![0x0, 0xFD1934, 3].span();
        assert_eq!(
            read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 0),
            (0x3419, 3)
        );

        let mut serialized_byte_array = array![0x0, 0xFE9145DC00, 5].span();
        assert_eq!(
            read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 0),
            (0xDC4591, 5)
        );

        let mut serialized_byte_array = array![0x0, 0xFEE5810008, 5].span();
        assert_eq!(
            read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 0),
            (0x80081E5, 5)
        );

        let mut serialized_byte_array = array![0x0, 0xFF57284E56DAB40000, 9].span();
        assert_eq!(
            read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 0),
            (0xB4DA564E2857, 9)
        );

        let mut serialized_byte_array = array![0x0, 0xFF58C1597DA183F54B, 9].span();
        assert_eq!(
            read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 0),
            (0x4BF583A17D59C158, 9)
        );
    }

    #[test]
    fn test_random() {
        //Test cases generated by: scripts/tests_unit/varint.js
        let mut serialized_byte_array = array![0x1, 0x7ac46f90147e2771553e1ab9954d0888a26ae34a5ec8797d23c70c46ae7eff, 0xffbfa346aa10000000da1980c777, 0xe].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 31), (0x10aa46a3bf, 9));

        let mut serialized_byte_array = array![0x4, 0x2fe534d7e247592063c7e7612fb9ad3ddd165976dcc44db6a38bb4704d70d1, 0x101ac4bdb1ae2bf6a48fa4b788634cd5ff3f7d8e058e60320941eba7e311eb, 0x078d9cfa95acb528ed55236d5f3d63f10cc5ac8e7c851e1cb20a7a9fc5c6ae, 0x771f21045836bbf33f77d3a60dc68d07aa3ee36b5934e053ad34a8de57893b, 0x60ea9b222542e3e71020, 0xa].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 47), (0x932608e058e7d3f, 9));

        let mut serialized_byte_array = array![0x0, 0x19d0ff033e596d10172900eb29f67584437f4f60e219867710, 0x19].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 2), (0x2917106d593e03, 9));

        let mut serialized_byte_array = array![0x3, 0xb9cd61ce59752567aa6c367bb0b2fa6d5698fe7750f401127ccfdae00c44bd, 0x29ee39b70d3a95dcf694372502b8c88699603550fa73e12fd1462c7529ee2e, 0xc48a0e2755828ba3ff36f8f497a57c1054fc8ee4e8f590eee10ead6d56f38c, 0x56f62b16728849, 0x7].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 18), (0x1f45077, 5));

        let mut serialized_byte_array = array![0x0, 0xfed77afa11f6be233f0fefe2, 0xc].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 0), (0x11fa7ad7, 5));

        let mut serialized_byte_array = array![0x0, 0x020451ac02701fcf77ed2a6e, 0xc].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 0), (0x2, 1));

        let mut serialized_byte_array = array![0x1, 0xd0ff34e1ff8901000000cf080b9bd9c68bbabea72a2896cd3dc4dbd80720e3, 0x5e, 0x1].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 1), (0x189ffe134, 9));

        let mut serialized_byte_array = array![0x1, 0xba62942a2bf2cd626275fe4427740ae9e385c8c3654e1ef4e3fde7579d918e, 0x95bb9bf97ddc4f48df6f78ba79ff47314790ad6f, 0x14].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 10), (0xa742744, 5));

        let mut serialized_byte_array = array![0x4, 0x09f7389c902939392289283fcab802308509e0218f37ba9c0fb6c165388e98, 0xa172c3d39edf71d380f7768d59a595b7dcd5533b9cffc548f14703000000c3, 0xfc9cbc6a1e417778513ffa2d78cf685a00cb17c905bcaddf22f3fffa08d10f, 0x81e5d5064c6f9c51da7ee7483a79835b3d43f3346131b286c461a42198d938, 0x9d6818, 0x3].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 52), (0x347f148c5, 9));

        let mut serialized_byte_array = array![0x4, 0x52b053a2846131973dff3b8e11ae6f8905005f1b7eda6843915bf8eba221a3, 0xca7451007b50537e395c1f6986528d2d767cddce1981f96a75685bbce44903, 0xef2e69d16ade4fc84da188dec0c47e39ef07db7544708f36e1cdc9c755c589, 0xae4a6e3e40a246bf1ede6c662ac9fcccac7afaf982e8b93a0bd5515a372694, 0xc2ff0677a63c794f, 0x8].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 9), (0x5896fae118e3b, 9));

        let mut serialized_byte_array = array![0x1, 0x6b4cf478a95b1a11b94f47f7ff029ee2199401000098f6ff2c2b02cce14a2a, 0xbafd5410174e9913964913643e9be1d52039d0b2ca8434, 0x17].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 12), (0x19419e29e02, 9));

        let mut serialized_byte_array = array![0x1, 0x5078cd0814de9329a8b19c187c76cefffee6b6e9581050fd7f032d4f719fda, 0x994b30a0a0dd06934f7699dc936dc5, 0xf].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 23), (0x37f, 3));

        let mut serialized_byte_array = array![0x4, 0xc688b8a67c24d5f0f04900097b41d56cea3b05027b4065e033402875eccc3f, 0x1055b56cff921e6d85571590aae34d0843becc1b1c0fc77362f96bde37b37e, 0x3a9908667b049e37e32283afe4e03dc02090c1576cde73b9b1c930fee4f3eb, 0x6ad0727a55ac3f33f924ca67acce050fb509458d3e331564c6ad03e108b456, 0xc6ffe84d, 0x4].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 89), (0x6aebf3e4, 5));

        let mut serialized_byte_array = array![0x0, 0x6cffd1027476a109000021c90e47314428, 0x11].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 1), (0x9a1767402d1, 9));

        let mut serialized_byte_array = array![0x2, 0xb66680d25e88d35059847b7cd232db62527c0fab4ad69080e3812d516d9548, 0x3267d37d4e24bad55204a54d2a50e419cec5fe3feb0400b88a26432e478605, 0x34ca6df8ddab200384a80a41631f44c467cc9c7f7b, 0x15].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 49), (0x4eb3f, 5));

        let mut serialized_byte_array = array![0x2, 0x683675fe01d201008839ee5bb3d6e4f8035f669dce3865975e848e81831ffd, 0x252f8087ff3cd0976f7f1b2cb5f55d733a23f32c0f416e0cbbd335d36e7a96, 0x04fac0d9e382d300, 0x8].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 3), (0x1d201, 5));

        let mut serialized_byte_array = array![0x2, 0x983eff45238430b250ab0274a534fcd0dee4861d43030b5b6386278cbe108c, 0x3b5f050c22e3d2f1087c7085b83db4c35c69d0b70a952cce38e77607cbf458, 0x6abc5132602ef4d30a609c5534e4464f8b0f7352474b20d83795, 0x1a].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 2), (0x2ab50b230842345, 9));

        let mut serialized_byte_array = array![0x2, 0xc31ddaba04b324e4e72fa4ebf1291d8923fcb96ed057f599e0dcf4db1b5f82, 0x8efe00a00100333d6b3d9cabdb02fd3def6eb12f46c57a0330b67c7f075777, 0x4a1033e9e5d8, 0x6].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 32), (0x1a000, 5));

        let mut serialized_byte_array = array![0x3, 0x6ea186fbf208df2d0d3dddb78db7e8cc08626a579526833bee084a2f5a7ef9, 0x49875873b6902ea68a667a8a8ca7c6164413f548018970c2a56c1f2acf4664, 0x90535758fff0697438f51d00007fd4205c85199e21893eb6f1ccd67ea72435, 0x7decaf59d350629ae9830f0d3bfe010c301a0477, 0x14].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 66), (0x1df5387469f0, 9));

        let mut serialized_byte_array = array![0x2, 0x7f2da616b2f24b9e349e0dc185fcf27efffb8fbd987d5e2f0362e21e492aac, 0xc0e72b630b07a534c4653ade59b951e4672f0358e4d043a14e479b34310f51, 0xd00ab82278fb, 0x6].span();
        assert_eq!(read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 16), (0x32f5e7d98bd8ffb, 9));
    }

    #[test]
    #[should_panic(expected: 'Array index out of bounds')]
    fn test_manual_out_of_bounds_u8() {
        let mut serialized_byte_array = array![0x0, 0x0, 0].span();
        read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 0);
    }

    #[test]
    #[should_panic(expected: 'Array index out of bounds')]
    fn test_manual_out_of_bounds_u16() {
        let mut serialized_byte_array = array![0x0, 0xFD1C, 2].span();
        read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 0);
    }

    #[test]
    #[should_panic(expected: 'Array index out of bounds')]
    fn test_manual_out_of_bounds_u32() {
        let mut serialized_byte_array = array![0x0, 0xFE153C87, 4].span();
        read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 0);
    }

    #[test]
    #[should_panic(expected: 'Array index out of bounds')]
    fn test_manual_out_of_bounds_u64() {
        let mut serialized_byte_array = array![0x0, 0xFF89CEB67A153C87, 8].span();
        read(@Serde::<ByteArray>::deserialize(ref serialized_byte_array).unwrap(), 0);
    }

}
